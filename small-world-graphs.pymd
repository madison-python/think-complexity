---
title: "Think Complexity: Small World Graphs"
---

# Small world graphs

1. Simple graphs
2. Complete graphs
3. Random graphs
4. Regular graphs
5. Small world graphs

# Simple graphs

```{python, echo=False}
import warnings
warnings.filterwarnings('ignore')

import networkx as nx
import matplotlib.pyplot as plt

G = nx.Graph()

# Add nodes
G.add_node('Alice')
G.add_node('Bob')
G.add_node('Chuck')

# Add edges
G.add_edge('Alice', 'Bob')
G.add_edge('Alice', 'Chuck')
G.add_edge('Bob', 'Chuck')

COLORS = ['#66c2a5']  # colorbrewer2.org

nx.draw_circular(G, node_color=COLORS[0], node_size=2000, with_labels=True)
plt.axis('equal')
plt.show()
```

# Complete graphs

```{python, echo=False}
from thinkcomplexity.small_world_graphs import make_complete_graph

complete = make_complete_graph(10)
nx.draw_circular(complete, node_color=COLORS[0], node_size=1000, with_labels=True)
plt.axis('equal')
plt.show()
```

# Random graphs

```{python, echo=False}
from thinkcomplexity.small_world_graphs import make_random_graph

random_graph = make_random_graph(10, 0.3)
nx.draw_circular(random_graph, node_color=COLORS[0], node_size=1000, with_labels=True)
plt.axis('equal')
plt.show()
```

# Regular graphs

```{python, echo=False}
from thinkcomplexity.small_world_graphs import make_ring_lattice

lattice = make_ring_lattice(10, 4)
nx.draw_circular(lattice, node_color=COLORS[0], node_size=1000, with_labels=True)
plt.axis('equal')
plt.show()
```

# Watts-Strogatz graphs

```{python, echo=False}
from thinkcomplexity.small_world_graphs import make_ws_graph

ws = make_ws_graph(10, 4, 0.2)
nx.draw_circular(ws, node_color=COLORS[0], node_size=1000, with_labels=True)
plt.axis('equal')
plt.show()
```

# Examples of small world graphs

```{python, echo=False}
import thinkplot
from thinkcomplexity.small_world_graphs import make_ws_graph

n = 10
k = 4
ns = 40

thinkplot.preplot(cols=3)
ws = make_ws_graph(n, k, 0)
nx.draw_circular(ws, node_size=ns)
thinkplot.config(axis='equal')

thinkplot.subplot(2)
ws = make_ws_graph(n, k, 0.2)
nx.draw_circular(ws, node_size=ns)
thinkplot.config(axis='equal')

thinkplot.subplot(3)
ws = make_ws_graph(n, k, 1.0)
nx.draw_circular(ws, node_size=ns)
thinkplot.config(axis='equal')

plt.tight_layout()
plt.subplots_adjust(wspace=0, hspace=0, left=0, right=1)
```

# Small world graph behavior

```{python, echo=False}
import numpy as np
from thinkcomplexity.small_world_graphs import run_experiment

ps = np.logspace(-4, 0, 9)
res = run_experiment(ps)

L = []
C = []
for p, t in sorted(res.items()):
    mpls, ccs = zip(*t)
    mpl = np.mean(mpls)
    cc = np.mean(ccs)
    L.append(mpl)
    C.append(cc)

L = np.array(L) / L[0]
C = np.array(C) / C[0]

thinkplot.plot(ps, L, style='o-', linewidth=1)
thinkplot.plot(ps, C, style='s-', linewidth=1)
thinkplot.text(0.001, 0.9, 'C(p) / C(0)')
thinkplot.text(0.0005, 0.25, 'L(p) / L(0)')
thinkplot.config(xlabel='p', xscale='log',
                 xlim=[0.00009, 1.1], ylim=[-0.01, 1.01])
```
